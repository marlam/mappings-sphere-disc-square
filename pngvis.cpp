#include <cmath>

#include <QColor>
#include <QImage>

#include "pngvis.hpp"

/* This color map was created with gencolormap, https://github.com/marlam/gencolormap
 * using the following parameters: type=diverging n=301 hue=0 divergence=240
 * warmth=0.15 contrast=0.88 saturation=0.6 brightness=0.75 */
static const int colormap_colors = 301;
static const unsigned char colormap[] {
87, 7, 35,
90, 8, 36,
94, 9, 38,
98, 10, 40,
101, 12, 42,
105, 13, 44,
108, 15, 46,
112, 16, 48,
115, 18, 50,
119, 19, 52,
122, 21, 54,
126, 22, 56,
129, 24, 58,
132, 25, 60,
136, 27, 62,
139, 29, 63,
142, 30, 65,
145, 32, 67,
148, 34, 69,
152, 35, 71,
155, 37, 73,
158, 39, 75,
161, 40, 77,
164, 42, 78,
166, 44, 80,
169, 46, 82,
172, 48, 84,
175, 49, 86,
177, 51, 88,
180, 53, 90,
183, 55, 91,
185, 57, 93,
188, 59, 95,
190, 60, 97,
193, 62, 99,
195, 64, 100,
198, 66, 102,
200, 68, 104,
202, 70, 106,
204, 72, 108,
206, 74, 109,
208, 76, 111,
210, 78, 113,
212, 80, 115,
214, 82, 116,
216, 84, 118,
218, 86, 120,
220, 88, 121,
222, 90, 123,
223, 92, 125,
225, 94, 127,
227, 96, 128,
228, 98, 130,
230, 100, 132,
231, 102, 133,
233, 104, 135,
234, 106, 137,
235, 108, 138,
237, 110, 140,
238, 112, 141,
239, 114, 143,
240, 116, 145,
242, 118, 146,
243, 120, 148,
244, 122, 149,
245, 124, 151,
246, 125, 153,
247, 127, 154,
248, 129, 156,
249, 131, 157,
250, 133, 159,
251, 135, 160,
251, 137, 162,
252, 139, 163,
253, 141, 165,
254, 142, 166,
255, 144, 168,
255, 146, 169,
255, 148, 170,
255, 150, 172,
255, 151, 173,
255, 153, 175,
255, 155, 176,
255, 157, 178,
255, 158, 179,
255, 160, 180,
255, 162, 182,
255, 164, 183,
255, 165, 184,
255, 167, 186,
255, 169, 187,
255, 170, 188,
255, 172, 190,
255, 174, 191,
255, 175, 192,
255, 177, 193,
255, 178, 195,
255, 180, 196,
255, 182, 197,
255, 183, 198,
255, 185, 200,
255, 186, 201,
255, 188, 202,
255, 189, 203,
255, 191, 204,
255, 192, 206,
255, 194, 207,
255, 195, 208,
255, 197, 209,
255, 198, 210,
255, 200, 211,
255, 201, 213,
255, 203, 214,
255, 204, 215,
255, 205, 216,
255, 207, 217,
255, 208, 218,
255, 210, 219,
255, 211, 220,
255, 212, 221,
255, 214, 222,
255, 215, 223,
255, 216, 224,
255, 218, 225,
255, 219, 226,
255, 220, 227,
255, 222, 228,
255, 223, 229,
255, 224, 230,
255, 225, 231,
255, 227, 232,
255, 228, 233,
255, 229, 234,
255, 230, 235,
255, 231, 236,
255, 233, 237,
255, 234, 238,
255, 235, 239,
255, 236, 240,
255, 237, 241,
255, 238, 241,
255, 239, 242,
255, 241, 243,
255, 242, 244,
255, 243, 245,
255, 244, 246,
255, 245, 247,
255, 246, 247,
255, 247, 248,
255, 248, 249,
253, 251, 253,
246, 251, 255,
245, 251, 255,
244, 250, 255,
243, 249, 255,
241, 249, 255,
240, 248, 255,
239, 247, 255,
238, 247, 255,
236, 246, 255,
235, 245, 255,
234, 245, 255,
232, 244, 255,
231, 243, 255,
230, 242, 255,
228, 242, 255,
227, 241, 255,
226, 240, 255,
224, 239, 255,
223, 239, 255,
221, 238, 255,
220, 237, 255,
219, 236, 254,
217, 235, 254,
216, 235, 254,
214, 234, 254,
213, 233, 254,
211, 232, 253,
210, 231, 253,
208, 230, 253,
207, 230, 253,
205, 229, 253,
204, 228, 252,
202, 227, 252,
201, 226, 252,
199, 225, 251,
198, 224, 251,
196, 223, 251,
194, 222, 251,
193, 221, 250,
191, 220, 250,
190, 220, 249,
188, 219, 249,
186, 218, 249,
185, 217, 248,
183, 216, 248,
181, 215, 247,
180, 214, 247,
178, 213, 246,
176, 212, 246,
175, 211, 245,
173, 209, 245,
171, 208, 244,
169, 207, 244,
168, 206, 243,
166, 205, 243,
164, 204, 242,
162, 203, 241,
161, 202, 241,
159, 201, 240,
157, 200, 239,
155, 198, 239,
153, 197, 238,
152, 196, 237,
150, 195, 236,
148, 194, 236,
146, 192, 235,
144, 191, 234,
142, 190, 233,
140, 189, 232,
138, 188, 231,
137, 186, 230,
135, 185, 229,
133, 184, 228,
131, 182, 227,
129, 181, 226,
127, 180, 225,
125, 178, 224,
123, 177, 223,
121, 176, 222,
119, 174, 221,
117, 173, 220,
115, 172, 218,
114, 170, 217,
112, 169, 216,
110, 167, 215,
108, 166, 213,
106, 164, 212,
104, 163, 211,
102, 161, 209,
100, 160, 208,
98, 158, 206,
96, 157, 205,
94, 155, 203,
92, 154, 202,
91, 152, 200,
89, 151, 198,
87, 149, 197,
85, 147, 195,
83, 146, 193,
81, 144, 191,
80, 142, 190,
78, 141, 188,
76, 139, 186,
74, 137, 184,
72, 136, 182,
71, 134, 180,
69, 132, 178,
67, 130, 176,
65, 129, 174,
64, 127, 172,
62, 125, 170,
60, 123, 168,
59, 121, 165,
57, 119, 163,
55, 118, 161,
54, 116, 159,
52, 114, 156,
50, 112, 154,
49, 110, 152,
47, 108, 149,
45, 106, 147,
44, 104, 145,
42, 102, 142,
41, 100, 140,
39, 98, 137,
37, 96, 135,
36, 94, 132,
34, 92, 129,
33, 90, 127,
31, 88, 124,
30, 86, 122,
28, 84, 119,
27, 82, 116,
25, 80, 113,
24, 77, 111,
22, 75, 108,
21, 73, 105,
20, 71, 102,
18, 69, 99,
17, 67, 97,
15, 65, 94,
14, 62, 91,
13, 60, 88,
11, 58, 85,
10, 56, 82,
9, 53, 79,
8, 51, 76,
7, 49, 73,
6, 47, 70,
5, 44, 67
};

void png_vis(const std::string& name, int w, int h, const double* data,
        bool is_based_around_1, double maxval)
{
    QImage img(w, h, QImage::Format_RGB32);
    if (is_based_around_1)
        maxval -= 1;
    for (int y = 0; y < h; y++) {
        QRgb* scanline = reinterpret_cast<QRgb*>(img.scanLine(y));
        for (int x = 0; x < w; x++) {
            double v = data[y * w + x];
            if (std::isfinite(v)) {
                int direction = +1;
                if (is_based_around_1) {
                    if (v < 1) {
                        v = 1 / v;
                        direction = -1;
                    }
                    v -= 1;
                }
                v /= maxval;
                v = std::min(std::max(v, 0.0), 1.0);
                if (is_based_around_1)
                    v = 0.5 + direction * v / 2;
                //scanline[x] = QColor::fromHslF((0 + v * 240) / 360, 1.0f, 0.5f).rgb(); // jet color: never use!
                int colormap_index = std::round((1.0 - v) * (colormap_colors - 1) + 0.4999);
                scanline[x] = QColor(colormap[3 * colormap_index],
                                     colormap[3 * colormap_index + 1],
                                     colormap[3 * colormap_index + 2]).rgb();
            } else {
                scanline[x] = QColor(255, 255, 255).rgb();
            }
        }
    }
    img.save((name + ".png").c_str(), "png", 0);
}
